//a memory efficient solution in C

double findMedianSortedArrays(int* nums1, int nums1Size, int* nums2, int nums2Size) {
    if (nums1Size > nums2Size) {
        return findMedianSortedArrays(nums2, nums2Size, nums1, nums1Size);
    }
    int left = 0, right = nums1Size, partitionX, partitionY, maxLeftX, minRightX, maxLeftY, minRightY;
    while (left <= right) {
        partitionX = (left + right) / 2;
        partitionY = (nums1Size + nums2Size + 1) / 2 - partitionX;
        maxLeftX = (partitionX == 0) ? INT_MIN : nums1[partitionX - 1];
        minRightX = (partitionX == nums1Size) ? INT_MAX : nums1[partitionX];
        maxLeftY = (partitionY == 0) ? INT_MIN : nums2[partitionY - 1];
        minRightY = (partitionY == nums2Size) ? INT_MAX : nums2[partitionY];
        if (maxLeftX <= minRightY && maxLeftY <= minRightX) {
            if ((nums1Size + nums2Size) % 2 == 0) {
                return (double)(fmax(maxLeftX, maxLeftY) + fmin(minRightX, minRightY)) / 2;
            } else {
                return fmax(maxLeftX, maxLeftY);
            }
        } else if (maxLeftX > minRightY) {
            right = partitionX - 1;
        } else {
            left = partitionX + 1;
        }
    }
    return 0.0;
}